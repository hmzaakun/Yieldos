import * as anchor from "@coral-xyz/anchor";
import { Program } from "@coral-xyz/anchor";
import { Contracts } from "../target/types/contracts";
import {
    createMint,
    getOrCreateAssociatedTokenAccount,
    mintTo,
    TOKEN_PROGRAM_ID,
    ASSOCIATED_TOKEN_PROGRAM_ID,
} from "@solana/spl-token";
import {
    Keypair,
    SystemProgram,
    SYSVAR_RENT_PUBKEY,
    PublicKey,
} from "@solana/web3.js";

async function demoYieldos() {
    console.log("üé¨ === D√âMO YIELDOS - TEST DES FONCTIONS ===\n");

    // Configuration Anchor
    const provider = anchor.AnchorProvider.env();
    anchor.setProvider(provider);
    const program = anchor.workspace.Contracts as Program<Contracts>;

    console.log("üìç Program ID:", program.programId.toString());
    console.log("üåê RPC Endpoint:", provider.connection.rpcEndpoint);
    console.log("üí∞ Wallet:", provider.wallet.publicKey.toString());

    // G√©n√©ration des comptes de test
    const admin = Keypair.generate();
    const user1 = Keypair.generate();
    const decimals = 6;
    const strategyId = Math.floor(Math.random() * 1000000); // ID unique
    const strategyName = `Yieldos Demo Strategy #${strategyId}`;
    const strategyApy = 1200; // 12% APY
    const depositAmount = 500 * 10 ** decimals; // 500 tokens

    console.log("\nüë§ Comptes g√©n√©r√©s:");
    console.log("   Admin:", admin.publicKey.toString());
    console.log("   User1:", user1.publicKey.toString());
    console.log("   Strategy ID:", strategyId);

    try {
        // 1. Airdrop SOL
        console.log("\nüí∞ === AIRDROP SOL ===");
        await Promise.all([
            provider.connection.requestAirdrop(admin.publicKey, 3 * anchor.web3.LAMPORTS_PER_SOL),
            provider.connection.requestAirdrop(user1.publicKey, 3 * anchor.web3.LAMPORTS_PER_SOL),
        ]);
        console.log("‚úÖ Airdrop termin√©");
        await new Promise(resolve => setTimeout(resolve, 2000)); // Attendre confirmation

        // 2. Cr√©er le token sous-jacent
        console.log("\nü™ô === CR√âATION DU TOKEN ===");
        const underlyingMint = await createMint(
            provider.connection,
            admin,
            admin.publicKey,
            null,
            decimals
        );
        console.log("‚úÖ Token cr√©√©:", underlyingMint.toString());

        // 3. D√©river les PDAs
        console.log("\nüîë === D√âRIVATION DES PDAs ===");
        const [strategyCounterPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("strategy_counter")],
            program.programId
        );

        const [strategyPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("strategy"), new anchor.BN(strategyId).toArrayLike(Buffer, "le", 8)],
            program.programId
        );

        const [yieldTokenMintPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("yield_token"), new anchor.BN(strategyId).toArrayLike(Buffer, "le", 8)],
            program.programId
        );

        const [strategyVaultPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("strategy_vault"), new anchor.BN(strategyId).toArrayLike(Buffer, "le", 8)],
            program.programId
        );

        const [userPositionPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("user_position"), user1.publicKey.toBuffer(), strategyPda.toBuffer()],
            program.programId
        );

        console.log("‚úÖ PDAs calcul√©s");

        // 4. Initialiser le protocole (si pas d√©j√† fait)
        console.log("\nüîÑ === INITIALISATION PROTOCOLE ===");
        try {
            const tx1 = await program.methods
                .initializeProtocol()
                .accounts({
                    admin: admin.publicKey,
                    strategyCounter: strategyCounterPda,
                    systemProgram: SystemProgram.programId,
                    rent: SYSVAR_RENT_PUBKEY,
                } as any)
                .signers([admin])
                .rpc();
            console.log("‚úÖ Protocole initialis√©:", tx1.slice(0, 20) + "...");
        } catch (error: any) {
            if (error.message.includes("already in use")) {
                console.log("‚ÑπÔ∏è  Protocole d√©j√† initialis√©");
            } else {
                console.error("‚ùå Erreur:", error.message);
            }
        }

        // 5. Cr√©er une strat√©gie
        console.log("\nüìà === CR√âATION STRAT√âGIE ===");
        try {
            const tx2 = await program.methods
                .createStrategy(strategyName, strategyApy, new anchor.BN(strategyId))
                .accounts({
                    admin: admin.publicKey,
                    strategy: strategyPda,
                    strategyCounter: strategyCounterPda,
                    underlyingToken: underlyingMint,
                    yieldTokenMint: yieldTokenMintPda,
                    tokenProgram: TOKEN_PROGRAM_ID,
                    systemProgram: SystemProgram.programId,
                    rent: SYSVAR_RENT_PUBKEY,
                } as any)
                .signers([admin])
                .rpc();
            console.log("‚úÖ Strat√©gie cr√©√©e:", tx2.slice(0, 20) + "...");

            // V√©rifier la strat√©gie
            const strategy = await program.account.strategy.fetch(strategyPda);
            console.log("üìä Strat√©gie:", strategy.name);
            console.log("üìä APY:", strategy.apy.toNumber() / 100, "%");
        } catch (error: any) {
            console.error("‚ùå Erreur cr√©ation strat√©gie:", error.message);
            return;
        }

        // 6. Configurer les tokens utilisateur
        console.log("\nüí∞ === SETUP TOKENS UTILISATEUR ===");
        const userTokenAccount = await getOrCreateAssociatedTokenAccount(
            provider.connection,
            user1,
            underlyingMint,
            user1.publicKey
        );

        await mintTo(
            provider.connection,
            admin,
            underlyingMint,
            userTokenAccount.address,
            admin,
            depositAmount * 2
        );
        console.log("‚úÖ Tokens mint√©s pour user1");

        // 7. D√©p√¥t dans la strat√©gie
        console.log("\nüè¶ === D√âP√îT DANS STRAT√âGIE ===");
        try {
            const userYieldTokenAccount = await getOrCreateAssociatedTokenAccount(
                provider.connection,
                user1,
                yieldTokenMintPda,
                user1.publicKey
            );

            const tx3 = await program.methods
                .depositToStrategy(new anchor.BN(depositAmount), new anchor.BN(strategyId))
                .accounts({
                    user: user1.publicKey,
                    strategy: strategyPda,
                    userPosition: userPositionPda,
                    underlyingTokenMint: underlyingMint,
                    userUnderlyingToken: userTokenAccount.address,
                    strategyVault: strategyVaultPda,
                    yieldTokenMint: yieldTokenMintPda,
                    userYieldTokenAccount: userYieldTokenAccount.address,
                    tokenProgram: TOKEN_PROGRAM_ID,
                    associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
                    systemProgram: SystemProgram.programId,
                    rent: SYSVAR_RENT_PUBKEY,
                } as any)
                .signers([user1])
                .rpc();

            console.log("‚úÖ D√©p√¥t effectu√©:", tx3.slice(0, 20) + "...");
            console.log("üí∞ Montant:", depositAmount / 10 ** decimals, "tokens");

            // V√©rifier la position
            const userPosition = await program.account.userPosition.fetch(userPositionPda);
            console.log("üìä Yield tokens mint√©s:", userPosition.yieldTokensMinted.toNumber() / 10 ** decimals);
        } catch (error: any) {
            console.error("‚ùå Erreur d√©p√¥t:", error.message);
            return;
        }

        // 8. R√©clamation de yield (apr√®s d√©lai)
        console.log("\nüìà === R√âCLAMATION YIELD ===");
        console.log("‚è≥ Attente accumulation yield...");
        await new Promise(resolve => setTimeout(resolve, 3000));

        try {
            const userYieldTokenAccount = await getOrCreateAssociatedTokenAccount(
                provider.connection,
                user1,
                yieldTokenMintPda,
                user1.publicKey
            );

            const initialBalance = Number(userYieldTokenAccount.amount);

            const tx4 = await program.methods
                .claimYield(new anchor.BN(strategyId))
                .accounts({
                    user: user1.publicKey,
                    strategy: strategyPda,
                    userPosition: userPositionPda,
                    yieldTokenMint: yieldTokenMintPda,
                    userYieldTokenAccount: userYieldTokenAccount.address,
                    tokenProgram: TOKEN_PROGRAM_ID,
                } as any)
                .signers([user1])
                .rpc();

            console.log("‚úÖ Yield r√©clam√©:", tx4.slice(0, 20) + "...");

            const finalTokenAccount = await getOrCreateAssociatedTokenAccount(
                provider.connection,
                user1,
                yieldTokenMintPda,
                user1.publicKey
            );

            const finalBalance = Number(finalTokenAccount.amount);
            const yieldGained = (finalBalance - initialBalance) / 10 ** decimals;
            console.log("üìà Yield gagn√©:", yieldGained, "tokens");
        } catch (error: any) {
            console.error("‚ùå Erreur r√©clamation:", error.message);
        }

        // 9. Test des instructions marketplace
        console.log("\nüè™ === TEST MARKETPLACE ===");
        const [marketplacePda] = PublicKey.findProgramAddressSync(
            [Buffer.from("marketplace"), strategyPda.toBuffer()],
            program.programId
        );

        const [marketplaceCounterPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("marketplace_counter")],
            program.programId
        );

        try {
            const tx5 = await program.methods
                .createMarketplace(new anchor.BN(strategyId), new anchor.BN(0), 100)
                .accounts({
                    admin: admin.publicKey,
                    strategy: strategyPda,
                    marketplace: marketplacePda,
                    marketplaceCounter: marketplaceCounterPda,
                    systemProgram: SystemProgram.programId,
                    rent: SYSVAR_RENT_PUBKEY,
                } as any)
                .signers([admin])
                .rpc();

            console.log("‚úÖ Marketplace cr√©√©:", tx5.slice(0, 20) + "...");

            const marketplace = await program.account.marketplace.fetch(marketplacePda);
            console.log("üìä Frais trading:", marketplace.tradingFeeBps / 100, "%");
        } catch (error: any) {
            if (error.message.includes("already in use")) {
                console.log("‚ÑπÔ∏è  Marketplace d√©j√† cr√©√©");
            } else {
                console.error("‚ùå Erreur marketplace:", error.message);
            }
        }

        // 10. R√©sum√© final
        console.log("\nüìä === R√âSUM√â FINAL ===");
        console.log("=====================================");
        console.log("‚úÖ FONCTIONS TEST√âES AVEC SUCC√àS:");
        console.log("   üîß initializeProtocol");
        console.log("   üìà createStrategy");
        console.log("   üí∞ depositToStrategy");
        console.log("   üìà claimYield");
        console.log("   üè™ createMarketplace");
        console.log("");
        console.log("üéØ YIELDOS ENTI√àREMENT FONCTIONNEL!");
        console.log("‚úÖ Toutes les fonctions de base marchent");
        console.log("üöÄ Pr√™t pour la d√©mo!");
        console.log("=====================================");

    } catch (error) {
        console.error("\nüí• Erreur g√©n√©rale:", error);
    }
}

// Ex√©cution
demoYieldos().catch(console.error); 