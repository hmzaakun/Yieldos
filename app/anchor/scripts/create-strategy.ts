import * as anchor from "@coral-xyz/anchor";
import { Connection, PublicKey, Keypair, SystemProgram, SYSVAR_RENT_PUBKEY } from "@solana/web3.js";
import { Program } from "@coral-xyz/anchor";
import { createMint, TOKEN_PROGRAM_ID } from "@solana/spl-token";
import { Contracts } from "../target/types/contracts";

async function createStrategy() {
    console.log("üéØ === CR√âATION D'UNE NOUVELLE STRAT√âGIE ===\n");

    const connection = new Connection("https://api.devnet.solana.com", "confirmed");
    const wallet = anchor.AnchorProvider.env().wallet;
    const provider = new anchor.AnchorProvider(connection, wallet, {});
    anchor.setProvider(provider);

    const program = anchor.workspace.Contracts as Program<Contracts>;
    console.log("üìã Program ID:", program.programId.toString());
    console.log("üîë Wallet:", wallet.publicKey.toString());

    if (!wallet.payer) {
        throw new Error("Wallet payer non disponible");
    }

    try {
        // Param√®tres de la nouvelle strat√©gie
        const strategyName = "High Yield USDC";
        const apyBasisPoints = 1500; // 15% APY en basis points
        const strategyId = 2; // ID de la nouvelle strat√©gie

        console.log(`\nüèóÔ∏è Cr√©ation de la strat√©gie "${strategyName}"...`);
        console.log("   APY:", apyBasisPoints, "basis points (", apyBasisPoints / 100, "%)");
        console.log("   ID:", strategyId);

        // 1. Cr√©er un nouveau token mint pour cette strat√©gie (underlying token)
        console.log("\nüí∞ Cr√©ation du token mint underlying...");

        const underlyingMint = await createMint(
            connection,
            wallet.payer,
            wallet.publicKey, // mint authority
            wallet.publicKey, // freeze authority
            6 // decimals
        );

        console.log("‚úÖ Underlying token mint cr√©√©:", underlyingMint.toString());

        // 2. Calculer les PDAs n√©cessaires
        const [strategyPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("strategy"), new anchor.BN(strategyId).toArrayLike(Buffer, "le", 8)],
            program.programId
        );

        const [strategyCounterPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("strategy_counter")],
            program.programId
        );

        // Le yield_token_mint est un PDA calcul√© automatiquement
        const [yieldTokenMintPda] = PublicKey.findProgramAddressSync(
            [Buffer.from("yield_token"), new anchor.BN(strategyId).toArrayLike(Buffer, "le", 8)],
            program.programId
        );

        console.log("‚úÖ Yield token mint PDA calcul√©:", yieldTokenMintPda.toString());

        // 3. Cr√©er la strat√©gie
        console.log("\nüöÄ Cr√©ation de la strat√©gie on-chain...");

        const tx = await program.methods
            .createStrategy(strategyName, apyBasisPoints, new anchor.BN(strategyId))
            .accountsPartial({
                admin: wallet.publicKey,
                strategy: strategyPda,
                strategyCounter: strategyCounterPda,
                underlyingToken: underlyingMint,
                yieldTokenMint: yieldTokenMintPda,
                tokenProgram: TOKEN_PROGRAM_ID,
                systemProgram: SystemProgram.programId,
                rent: SYSVAR_RENT_PUBKEY,
            })
            .rpc();

        console.log("‚úÖ Strat√©gie cr√©√©e avec succ√®s!");
        console.log("üìù Transaction:", tx);
        console.log("üîó PDA de la strat√©gie:", strategyPda.toString());

        // 4. V√©rifier la cr√©ation
        console.log("\nüîç V√©rification de la strat√©gie cr√©√©e...");

        const strategyAccount = await program.account.strategy.fetch(strategyPda);
        console.log("‚úÖ Strat√©gie v√©rifi√©e:");
        console.log("   Nom:", strategyAccount.name);
        console.log("   APY:", strategyAccount.apy.toString(), "basis points");
        console.log("   Underlying Token:", strategyAccount.underlyingToken.toString());
        console.log("   Yield Token Mint:", strategyAccount.yieldTokenMint.toString());
        console.log("   Total Deposits:", strategyAccount.totalDeposits.toString());
        console.log("   Admin:", strategyAccount.admin.toString());
        console.log("   Strategy ID:", strategyAccount.strategyId.toString());

        console.log("\nüéâ STRAT√âGIE CR√â√âE AVEC SUCC√àS!");
        console.log("üí° Tu peux maintenant la voir dans le frontend √† l'adresse /strategies");

    } catch (error) {
        console.error("‚ùå Erreur lors de la cr√©ation de la strat√©gie:", error);
        throw error;
    }
}

// Ex√©cuter le script
createStrategy()
    .then(() => {
        console.log("\n‚úÖ Script termin√© avec succ√®s");
        process.exit(0);
    })
    .catch((error) => {
        console.error("\n‚ùå Erreur dans le script:", error);
        process.exit(1);
    }); 